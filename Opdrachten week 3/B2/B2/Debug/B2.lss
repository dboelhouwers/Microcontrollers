
B2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ec  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082d  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fd  00000000  00000000  00001381  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044f  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001b33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001b96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	4d c0       	rjmp	.+154    	; 0xc0 <__vector_9>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	4a d0       	rcall	.+148    	; 0x13e <main>
  aa:	53 c0       	rjmp	.+166    	; 0x152 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <timer2Init>:
int msCount = 0;
int high = 0;

void timer2Init( void )
{
	OCR2 = 125;			// Compare value of counter 2
  ae:	8d e7       	ldi	r24, 0x7D	; 125
  b0:	83 bd       	out	0x23, r24	; 35
	TIMSK |= 1<<7;		// T2 compare match interrupt enable
  b2:	87 b7       	in	r24, 0x37	; 55
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	87 bf       	out	0x37, r24	; 55
	TCCR2 = 0b00001011; // Initialize T2: timer, prescaler=64,
  b8:	8b e0       	ldi	r24, 0x0B	; 11
  ba:	85 bd       	out	0x25, r24	; 37
						// compare output disconnected,CTC,RUN
	sei();				// turn_on intr all
  bc:	78 94       	sei
  be:	08 95       	ret

000000c0 <__vector_9>:
}

ISR( TIMER2_COMP_vect )
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	2f 93       	push	r18
  cc:	3f 93       	push	r19
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
	msCount++; // Increment ms counter
  d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <msCount>
  d6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <msCount+0x1>
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <msCount+0x1>
  e0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <msCount>
	
	if(high)
  e4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ec:	23 2b       	or	r18, r19
  ee:	79 f0       	breq	.+30     	; 0x10e <__vector_9+0x4e>
	{
		if (msCount == 15)
  f0:	0f 97       	sbiw	r24, 0x0f	; 15
  f2:	e1 f4       	brne	.+56     	; 0x12c <__vector_9+0x6c>
		{
			high = 0;
  f4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			PORTC ^= 1<<0; // Toggle bit 0 van PORTC
  fc:	95 b3       	in	r25, 0x15	; 21
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	89 27       	eor	r24, r25
 102:	85 bb       	out	0x15, r24	; 21
			msCount = 0; // Reset ms_count value
 104:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <msCount+0x1>
 108:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <msCount>
 10c:	0f c0       	rjmp	.+30     	; 0x12c <__vector_9+0x6c>
		}
	}
	else
	{
		if(msCount == 25)
 10e:	49 97       	sbiw	r24, 0x19	; 25
 110:	69 f4       	brne	.+26     	; 0x12c <__vector_9+0x6c>
		{
			high = 1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			PORTC ^= 1<<0; // Toggle bit 0 van PORTC
 11e:	95 b3       	in	r25, 0x15	; 21
 120:	89 27       	eor	r24, r25
 122:	85 bb       	out	0x15, r24	; 21
			msCount = 0; // Reset ms_count value
 124:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <msCount+0x1>
 128:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <msCount>
		}
	}
}
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	3f 91       	pop	r19
 132:	2f 91       	pop	r18
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <main>:

int main( void )
{
	DDRC = 0xFF; // set PORTC for output (toggle PC0)
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	84 bb       	out	0x14, r24	; 20
	timer2Init();
 142:	b5 df       	rcall	.-150    	; 0xae <timer2Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	8f e1       	ldi	r24, 0x1F	; 31
 146:	9e e4       	ldi	r25, 0x4E	; 78
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0xa>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x10>
 14e:	00 00       	nop
 150:	f9 cf       	rjmp	.-14     	; 0x144 <main+0x6>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
