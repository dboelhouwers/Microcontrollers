
Opdracht 7 week 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e2  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000830  00000000  00000000  00000c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b0  00000000  00000000  00001492  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000422  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006a  00000000  00000000  00001c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	13 d0       	rcall	.+38     	; 0xc0 <main>
  9a:	79 c0       	rjmp	.+242    	; 0x18e <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
#include <stdio.h>
#include <stdlib.h>

void wait( int ms )
{
	for (int i=0; i<ms; i++)
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	ef ec       	ldi	r30, 0xCF	; 207
  aa:	f7 e0       	ldi	r31, 0x07	; 7
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	82 17       	cp	r24, r18
  ba:	93 07       	cpc	r25, r19
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <main>:
	}
}

int main( void )
{
	DDRD = 0b11111111;			//input
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	81 bb       	out	0x11, r24	; 17
			}
		}
		else if (PIND & 0b00111111)
		{
			//State 1
			PORTD = 0x10;
  c4:	d0 e1       	ldi	r29, 0x10	; 16
			PORTD = 0x00;

			if (PIND & 0b00011111)
			{
				//State 2
				PORTD = 0x20;
  c6:	c0 e2       	ldi	r28, 0x20	; 32
				PORTD = 0x00;
			}
			else if (PIND & 0b00011111)
			{
				//State 3
				PORTD = 0x30;
  c8:	10 e3       	ldi	r17, 0x30	; 48
				PORTD = 0x00;
				
				if (PIND & 0b00011111 || PIND & 0b00111111)
				{
					//End
					PORTD = 0x70;
  ca:	00 e7       	ldi	r16, 0x70	; 112
	DDRD = 0b11111111;			//input
	
	while (1)
	{
		//Start
		if (PIND & 0b00011111)
  cc:	80 b3       	in	r24, 0x10	; 16
  ce:	8f 71       	andi	r24, 0x1F	; 31
  d0:	09 f4       	brne	.+2      	; 0xd4 <main+0x14>
  d2:	41 c0       	rjmp	.+130    	; 0x156 <main+0x96>
		{
			//State 2
			PORTD = 0x20;
  d4:	c2 bb       	out	0x12, r28	; 18
			wait(200);
  d6:	88 ec       	ldi	r24, 0xC8	; 200
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	e1 df       	rcall	.-62     	; 0x9e <wait>
			PORTD = 0x00;
  dc:	12 ba       	out	0x12, r1	; 18
			wait(200);
  de:	88 ec       	ldi	r24, 0xC8	; 200
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	dd df       	rcall	.-70     	; 0x9e <wait>

			if (PIND & 0b01111111)
  e4:	80 b3       	in	r24, 0x10	; 16
  e6:	8f 77       	andi	r24, 0x7F	; 127
  e8:	31 f0       	breq	.+12     	; 0xf6 <main+0x36>
			{
				//Start
				PORTD = 0x00;
  ea:	12 ba       	out	0x12, r1	; 18
				wait(200);
  ec:	88 ec       	ldi	r24, 0xC8	; 200
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	d6 df       	rcall	.-84     	; 0x9e <wait>
				PORTD = 0x00;
  f2:	12 ba       	out	0x12, r1	; 18
  f4:	eb cf       	rjmp	.-42     	; 0xcc <main+0xc>
			}
			else if (PIND & 0b00111111)
  f6:	80 b3       	in	r24, 0x10	; 16
  f8:	8f 73       	andi	r24, 0x3F	; 63
  fa:	31 f0       	breq	.+12     	; 0x108 <main+0x48>
			{
				//State 1
				PORTD = 0x10;
				wait(200);
  fc:	d2 bb       	out	0x12, r29	; 18
  fe:	88 ec       	ldi	r24, 0xC8	; 200
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	cd df       	rcall	.-102    	; 0x9e <wait>
				PORTD = 0x00;
 104:	12 ba       	out	0x12, r1	; 18
 106:	e2 cf       	rjmp	.-60     	; 0xcc <main+0xc>
			}
			else if (PIND & 0b00011111)
 108:	80 b3       	in	r24, 0x10	; 16
 10a:	8f 71       	andi	r24, 0x1F	; 31
			{
				//State 3
				PORTD = 0x30;
 10c:	f9 f2       	breq	.-66     	; 0xcc <main+0xc>
				wait(200);
 10e:	12 bb       	out	0x12, r17	; 18
 110:	88 ec       	ldi	r24, 0xC8	; 200
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	c4 df       	rcall	.-120    	; 0x9e <wait>
				PORTD = 0x00;
 116:	12 ba       	out	0x12, r1	; 18
				
				if (PIND & 0b00011111 || PIND & 0b00111111)
 118:	80 b3       	in	r24, 0x10	; 16
 11a:	8f 71       	andi	r24, 0x1F	; 31
 11c:	19 f4       	brne	.+6      	; 0x124 <main+0x64>
 11e:	80 b3       	in	r24, 0x10	; 16
 120:	8f 73       	andi	r24, 0x3F	; 63
				{
					//End
					PORTD = 0x70;
 122:	79 f0       	breq	.+30     	; 0x142 <main+0x82>
					wait(200);
 124:	02 bb       	out	0x12, r16	; 18
 126:	88 ec       	ldi	r24, 0xC8	; 200
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	b9 df       	rcall	.-142    	; 0x9e <wait>
					PORTD = 0x00;
 12c:	12 ba       	out	0x12, r1	; 18

					if (PIND & 0b01111111)
 12e:	80 b3       	in	r24, 0x10	; 16
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	09 f4       	brne	.+2      	; 0x136 <main+0x76>
					{
						//Start
						PORTD = 0x00;
 134:	cb cf       	rjmp	.-106    	; 0xcc <main+0xc>
						wait(200);
 136:	12 ba       	out	0x12, r1	; 18
 138:	88 ec       	ldi	r24, 0xC8	; 200
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	b0 df       	rcall	.-160    	; 0x9e <wait>
						PORTD = 0x00;
 13e:	12 ba       	out	0x12, r1	; 18
 140:	c5 cf       	rjmp	.-118    	; 0xcc <main+0xc>
					}
				}
				else if (PIND & 0b01111111){
 142:	80 b3       	in	r24, 0x10	; 16
 144:	8f 77       	andi	r24, 0x7F	; 127
 146:	09 f4       	brne	.+2      	; 0x14a <main+0x8a>
					//Start
					PORTD = 0x00;
 148:	c1 cf       	rjmp	.-126    	; 0xcc <main+0xc>
					wait(200);
 14a:	12 ba       	out	0x12, r1	; 18
 14c:	88 ec       	ldi	r24, 0xC8	; 200
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	a6 df       	rcall	.-180    	; 0x9e <wait>
					PORTD = 0x00;
 152:	12 ba       	out	0x12, r1	; 18
				}
			}
		}
		else if (PIND & 0b00111111)
 154:	bb cf       	rjmp	.-138    	; 0xcc <main+0xc>
 156:	80 b3       	in	r24, 0x10	; 16
 158:	8f 73       	andi	r24, 0x3F	; 63
 15a:	09 f4       	brne	.+2      	; 0x15e <main+0x9e>
		{
			//State 1
			PORTD = 0x10;
 15c:	b7 cf       	rjmp	.-146    	; 0xcc <main+0xc>
			wait(200);
 15e:	d2 bb       	out	0x12, r29	; 18
 160:	88 ec       	ldi	r24, 0xC8	; 200
 162:	90 e0       	ldi	r25, 0x00	; 0
			PORTD = 0x00;
 164:	9c df       	rcall	.-200    	; 0x9e <wait>

			if (PIND & 0b00011111)
 166:	12 ba       	out	0x12, r1	; 18
 168:	80 b3       	in	r24, 0x10	; 16
 16a:	8f 71       	andi	r24, 0x1F	; 31
			{
				//State 2
				PORTD = 0x20;
 16c:	31 f0       	breq	.+12     	; 0x17a <main+0xba>
				wait(200);
 16e:	c2 bb       	out	0x12, r28	; 18
 170:	88 ec       	ldi	r24, 0xC8	; 200
 172:	90 e0       	ldi	r25, 0x00	; 0
				PORTD = 0x00;
 174:	94 df       	rcall	.-216    	; 0x9e <wait>
 176:	12 ba       	out	0x12, r1	; 18
			}
			else if (PIND & 0b01111111){
 178:	a9 cf       	rjmp	.-174    	; 0xcc <main+0xc>
 17a:	80 b3       	in	r24, 0x10	; 16
 17c:	8f 77       	andi	r24, 0x7F	; 127
 17e:	09 f4       	brne	.+2      	; 0x182 <main+0xc2>
				//Start
				PORTD = 0x00;
 180:	a5 cf       	rjmp	.-182    	; 0xcc <main+0xc>
				wait(200);
 182:	12 ba       	out	0x12, r1	; 18
 184:	88 ec       	ldi	r24, 0xC8	; 200
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	8a df       	rcall	.-236    	; 0x9e <wait>
				PORTD = 0x00;
 18a:	12 ba       	out	0x12, r1	; 18
 18c:	9f cf       	rjmp	.-194    	; 0xcc <main+0xc>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
