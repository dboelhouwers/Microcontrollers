
Opdracht 5 week 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000022a  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c61  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000935  00000000  00000000  00000ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f1  00000000  00000000  0000192a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00001e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004de  00000000  00000000  00001f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000371  00000000  00000000  000023ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000275f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	a8 d0       	rcall	.+336    	; 0x204 <main>
  b4:	b8 c0       	rjmp	.+368    	; 0x226 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_strobe_lcd_e>:
{
	lcd_write_command(0x01);
	_delay_ms(250);
}

void set_cursor(int position){
  b8:	ab 9a       	sbi	0x15, 3	; 21
  ba:	8f ec       	ldi	r24, 0xCF	; 207
  bc:	97 e0       	ldi	r25, 0x07	; 7
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_strobe_lcd_e+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_strobe_lcd_e+0xc>
  c4:	00 00       	nop
  c6:	ab 98       	cbi	0x15, 3	; 21
  c8:	8f ec       	ldi	r24, 0xCF	; 207
  ca:	97 e0       	ldi	r25, 0x07	; 7
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_strobe_lcd_e+0x14>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_strobe_lcd_e+0x1a>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <init_4bits_mode>:
  d6:	cf 93       	push	r28
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	84 bb       	out	0x14, r24	; 20
  dc:	15 ba       	out	0x15, r1	; 21
  de:	c0 e2       	ldi	r28, 0x20	; 32
  e0:	c5 bb       	out	0x15, r28	; 21
  e2:	ea df       	rcall	.-44     	; 0xb8 <lcd_strobe_lcd_e>
  e4:	c5 bb       	out	0x15, r28	; 21
  e6:	e8 df       	rcall	.-48     	; 0xb8 <lcd_strobe_lcd_e>
  e8:	80 e8       	ldi	r24, 0x80	; 128
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	e5 df       	rcall	.-54     	; 0xb8 <lcd_strobe_lcd_e>
  ee:	15 ba       	out	0x15, r1	; 21
  f0:	e3 df       	rcall	.-58     	; 0xb8 <lcd_strobe_lcd_e>
  f2:	80 ef       	ldi	r24, 0xF0	; 240
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	e0 df       	rcall	.-64     	; 0xb8 <lcd_strobe_lcd_e>
  f8:	15 ba       	out	0x15, r1	; 21
  fa:	de df       	rcall	.-68     	; 0xb8 <lcd_strobe_lcd_e>
  fc:	80 e6       	ldi	r24, 0x60	; 96
  fe:	85 bb       	out	0x15, r24	; 21
 100:	db df       	rcall	.-74     	; 0xb8 <lcd_strobe_lcd_e>
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <lcd_write_data>:
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	aa 9a       	sbi	0x15, 2	; 21
 10e:	d4 df       	rcall	.-88     	; 0xb8 <lcd_strobe_lcd_e>
 110:	c2 95       	swap	r28
 112:	c0 7f       	andi	r28, 0xF0	; 240
 114:	c5 bb       	out	0x15, r28	; 21
 116:	aa 9a       	sbi	0x15, 2	; 21
 118:	cf df       	rcall	.-98     	; 0xb8 <lcd_strobe_lcd_e>
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <lcd_write_command>:
 11e:	cf 93       	push	r28
 120:	c8 2f       	mov	r28, r24
 122:	85 bb       	out	0x15, r24	; 21
 124:	aa 98       	cbi	0x15, 2	; 21
 126:	c8 df       	rcall	.-112    	; 0xb8 <lcd_strobe_lcd_e>
 128:	c2 95       	swap	r28
 12a:	c0 7f       	andi	r28, 0xF0	; 240
 12c:	c5 bb       	out	0x15, r28	; 21
 12e:	aa 98       	cbi	0x15, 2	; 21
 130:	c3 df       	rcall	.-122    	; 0xb8 <lcd_strobe_lcd_e>
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <lcd_clear>:
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	f2 df       	rcall	.-28     	; 0x11e <lcd_write_command>
 13a:	2f e7       	ldi	r18, 0x7F	; 127
 13c:	8a e1       	ldi	r24, 0x1A	; 26
 13e:	96 e0       	ldi	r25, 0x06	; 6
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <lcd_clear+0xa>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_clear+0x14>
 14a:	00 00       	nop
 14c:	08 95       	ret

0000014e <lcd_write_text>:
	//TODO: Finish method.
	//lcd_write_command();
}

void lcd_write_text(char *str, int line, _Bool slowmode){
 14e:	af 92       	push	r10
 150:	bf 92       	push	r11
 152:	df 92       	push	r13
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	00 d0       	rcall	.+0      	; 0x162 <lcd_write_text+0x14>
 162:	00 d0       	rcall	.+0      	; 0x164 <lcd_write_text+0x16>
 164:	1f 92       	push	r1
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	8c 01       	movw	r16, r24
 16c:	d4 2e       	mov	r13, r20
	if (line == 1){
 16e:	61 30       	cpi	r22, 0x01	; 1
 170:	71 05       	cpc	r23, r1
 172:	39 f4       	brne	.+14     	; 0x182 <lcd_write_text+0x34>
		lcd_write_command(0x80);
 174:	80 e8       	ldi	r24, 0x80	; 128
 176:	d3 df       	rcall	.-90     	; 0x11e <lcd_write_command>
			lcd_write_data(errorMessage[i]);
		}
		//TODO: Find a way to stop/exit at this line, so that the text is NOT printed beyond this point.
	}
	
	for(;*str; str++){
 178:	f8 01       	movw	r30, r16
 17a:	80 81       	ld	r24, Z
 17c:	81 11       	cpse	r24, r1
 17e:	20 c0       	rjmp	.+64     	; 0x1c0 <lcd_write_text+0x72>
 180:	32 c0       	rjmp	.+100    	; 0x1e6 <lcd_write_text+0x98>
void lcd_write_text(char *str, int line, _Bool slowmode){
	if (line == 1){
		lcd_write_command(0x80);

	}
	else if (line == 2){
 182:	62 30       	cpi	r22, 0x02	; 2
 184:	71 05       	cpc	r23, r1
 186:	19 f4       	brne	.+6      	; 0x18e <lcd_write_text+0x40>
		lcd_write_command(0xC0);
 188:	80 ec       	ldi	r24, 0xC0	; 192
 18a:	c9 df       	rcall	.-110    	; 0x11e <lcd_write_command>
 18c:	f5 cf       	rjmp	.-22     	; 0x178 <lcd_write_text+0x2a>
	}
	else {
		char errorMessage[5] = "Error";
 18e:	85 e0       	ldi	r24, 0x05	; 5
 190:	e0 e0       	ldi	r30, 0x00	; 0
 192:	f1 e0       	ldi	r31, 0x01	; 1
 194:	de 01       	movw	r26, r28
 196:	11 96       	adiw	r26, 0x01	; 1
 198:	01 90       	ld	r0, Z+
 19a:	0d 92       	st	X+, r0
 19c:	8a 95       	dec	r24
		lcd_clear();
 19e:	e1 f7       	brne	.-8      	; 0x198 <lcd_write_text+0x4a>
 1a0:	ca df       	rcall	.-108    	; 0x136 <lcd_clear>
 1a2:	ce 01       	movw	r24, r28
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	7c 01       	movw	r14, r24
 1a8:	5e 01       	movw	r10, r28
 1aa:	97 e0       	ldi	r25, 0x07	; 7
 1ac:	a9 0e       	add	r10, r25
 1ae:	b1 1c       	adc	r11, r1
		for (int i = 0; i <= 5; i++){
			lcd_write_data(errorMessage[i]);
 1b0:	f7 01       	movw	r30, r14
 1b2:	81 91       	ld	r24, Z+
 1b4:	7f 01       	movw	r14, r30
 1b6:	a7 df       	rcall	.-178    	; 0x106 <lcd_write_data>
		lcd_write_command(0xC0);
	}
	else {
		char errorMessage[5] = "Error";
		lcd_clear();
		for (int i = 0; i <= 5; i++){
 1b8:	ea 14       	cp	r14, r10
 1ba:	fb 04       	cpc	r15, r11
 1bc:	c9 f7       	brne	.-14     	; 0x1b0 <lcd_write_text+0x62>
 1be:	dc cf       	rjmp	.-72     	; 0x178 <lcd_write_text+0x2a>
 1c0:	0f 5f       	subi	r16, 0xFF	; 255
		}
		//TODO: Find a way to stop/exit at this line, so that the text is NOT printed beyond this point.
	}
	
	for(;*str; str++){
		lcd_write_data(*str);
 1c2:	1f 4f       	sbci	r17, 0xFF	; 255
 1c4:	a0 df       	rcall	.-192    	; 0x106 <lcd_write_data>
		if (slowmode){
 1c6:	dd 20       	and	r13, r13
 1c8:	49 f0       	breq	.+18     	; 0x1dc <lcd_write_text+0x8e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	ff ef       	ldi	r31, 0xFF	; 255
 1cc:	20 e7       	ldi	r18, 0x70	; 112
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	f1 50       	subi	r31, 0x01	; 1
 1d2:	20 40       	sbci	r18, 0x00	; 0
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <lcd_write_text+0x82>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_write_text+0x8c>
 1da:	00 00       	nop
			lcd_write_data(errorMessage[i]);
		}
		//TODO: Find a way to stop/exit at this line, so that the text is NOT printed beyond this point.
	}
	
	for(;*str; str++){
 1dc:	f8 01       	movw	r30, r16
 1de:	81 91       	ld	r24, Z+
 1e0:	8f 01       	movw	r16, r30
 1e2:	81 11       	cpse	r24, r1
 1e4:	ef cf       	rjmp	.-34     	; 0x1c4 <lcd_write_text+0x76>
		lcd_write_data(*str);
		if (slowmode){
			_delay_ms(100);
		}
	}
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	ff 90       	pop	r15
 1fa:	ef 90       	pop	r14
 1fc:	df 90       	pop	r13
 1fe:	bf 90       	pop	r11
 200:	af 90       	pop	r10
 202:	08 95       	ret

00000204 <main>:
#define true 1

int main(void)
{
	// Init I/O
	DDRD = 0xFF; // PORTD(7) output, PORTD(6:0) input
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	81 bb       	out	0x11, r24	; 17

	// Init LCD
	init_4bits_mode();
 208:	66 df       	rcall	.-308    	; 0xd6 <init_4bits_mode>

	while (1)
	{
		lcd_clear();
 20a:	95 df       	rcall	.-214    	; 0x136 <lcd_clear>
 20c:	40 e0       	ldi	r20, 0x00	; 0
		lcd_write_text("Yedi you are", 1, false);
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	86 e0       	ldi	r24, 0x06	; 6
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	9b df       	rcall	.-202    	; 0x14e <lcd_write_text>
 218:	41 e0       	ldi	r20, 0x01	; 1
		lcd_write_text("Yedi you are", 2, true);
 21a:	62 e0       	ldi	r22, 0x02	; 2
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	86 e0       	ldi	r24, 0x06	; 6
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	95 df       	rcall	.-214    	; 0x14e <lcd_write_text>
 224:	f2 cf       	rjmp	.-28     	; 0x20a <main+0x6>

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
